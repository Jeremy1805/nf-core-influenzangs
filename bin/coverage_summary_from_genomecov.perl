#!/usr/bin/perl -w



=head1 NAME

coverage_summary_from_genomecov.perl

=head1 VERSION

0.1

=head1 DESCRIPTION

Calculate Base Pair resolution for depth output from samtools

=head1 INPUT

FLAGS:
    B<-i> BEDTOOLS genomecov coverage file
    B<-b> GENOME SIZE file CHR<TAB>LENGTH
    B<-o> a TABLE output file

=head1 OUTPUT

BED file

=head1 OTHER REQUIREMENTS

NONE

=head1 EXMAPLE USAGE

coverage_summary_from_genomecov.perl -i in.coverage -o out.csv

=head1 AUTHOR

Aengus Stewart CRUK

=cut

# START OF CODE

use strict;
use FindBin qw( $Bin );
use Getopt::Std;
use POSIX qw( floor ceil );
use Time::HiRes qw(gettimeofday);

use vars qw( $opt_b $opt_i $opt_o $opt_t $opt_d );
our( $VERSION, @FIELD_NAMES, @COVERAGE_LEVELS, $MAX_COUNTER, $MAX_COVERAGE, $MINIMUM_PERCENTAGE_LEVEL );

$VERSION = 0.1;
@FIELD_NAMES = qw( CHR POS DEPTH );
@COVERAGE_LEVELS = qw( 10 20 50 100 1000 );
$MAX_COUNTER = 1000000;
$MAX_COVERAGE = 100000;

my $record;
#my @genomecov_fields;
my @genomecov_fields;
my $i;
my @coverage_table;
my $zero_coverage;
my $non_zero_coverage;
my $low_coverage;
my $median_coverage;
my $mean_coverage;
my $max_coverage = 0 ;
my $min_coverage = 1000;
my $total;
my @all_counts;
my $chr;
my $chr_length;
my $genome_length;
my $time_0 = gettimeofday();
my $record_counter;
my $debug = 0;
my $output;

my $correct_usage = "USAGE: coverage_summary_from_genomecov.perl [ flags ]\n\n" .
                    "  FLAGS\n" .
                    "    Required:\n" .
                    "      -i <filename> BEDTOOLS genomecov format CHR<TAB>POS<TAB>DEPTH\n" .
                    "      -b <filename> Genome Size file CHR<TAB>LENGTH\n" .
                    "      -o <filename> Produces a big table of coverage at different percentage levels\n" .
                    "    Optional:\n" .
                    "      -d [0|1]      Debug Level\n\n" .
                    "  INPUT for this script is generated by:\n" .
                    "    bedtools genomecov -d -ibam sample1.bam -g reference_genome.fasta > out.coverage\n\n\n";
   
# Get command line args
getopts("b:i:o:d:");

# Open the INPUT file
if ( $opt_i )
{
  print STDERR "Coverage File: $opt_i\n";
  check_infile( *F_IN, "${opt_i}" );
}
else
{
  die "\nPANTS: No input BEDTOOLS genomecov file given.\n\n$correct_usage\n\n\n";
}

# Open the output file
if ( $opt_o )
{
  print STDERR "Out File: $opt_o\n";
  check_outfile( *F_OUT, "${opt_o}" );
  print F_OUT "$opt_i\t\n";
}
else
{
  die "\nPANTS: Cant open output file.\n\n$correct_usage\n\n\n";
}

if ( $opt_b )
{
  print STDERR "Genome Chromosome Size File: $opt_b\n";
  check_infile( *CHR_IN, "${opt_b}" );
  while( defined( $record = <CHR_IN> ) )
  {
    chomp( $record );
    ( $chr, $chr_length ) = split( /\s+/, $record );
    $genome_length += $chr_length;
  }
}
else
{
  die "\nPANTS: Cant open Genome Chromosome file.\n\n$correct_usage\n\n\n";
}

$debug = $opt_d if ( $opt_d );

for ( $i = 0 ; $i <= $#{COVERAGE_LEVELS}; $i++ )
{
  $coverage_table[$i] = 0;
}
$zero_coverage = 0;
$low_coverage = 0;

while( defined( $record =<F_IN> ) )
{

    # Progress.....
  $record_counter++;
  printf STDOUT ( "..........%d %.2f %s\n", $record_counter, ( gettimeofday() - $time_0 ), "seconds" )
    if ( ( $record_counter % ${MAX_COUNTER} ) == 0 );

  next if ( $record =~ /^$/ );

  # Split the input line into WHITESPACE delimited fields
  @genomecov_fields = split( /\s+/, $record );

  print STDERR "CHR = $genomecov_fields[0]\tPOS = $genomecov_fields[1] DEPTH=$genomecov_fields[2]\n" if ( $debug >= 1 );

#  foreach my $threshold ( @COVERAGE_LEVELS )
#  {
#    print STDERR "$threshold\n";
#  }
#  print "$#{COVERAGE_LEVELS}\n";

  push( @all_counts, $genomecov_fields[2] );
  $max_coverage = $genomecov_fields[2] if ( $genomecov_fields[2] > $max_coverage );
  $min_coverage = $genomecov_fields[2] if ( $genomecov_fields[2] < $min_coverage );
  $total += $genomecov_fields[2];

  if ( $genomecov_fields[2] == 0 )
  {
    $zero_coverage++;
  }
  elsif ( $genomecov_fields[2] <= 5 )
  {
    $low_coverage++;
    $non_zero_coverage++;
    next;
  }
  else
  {
    $non_zero_coverage++;
  }

  for ( $i = 0 ; $i <= $#{COVERAGE_LEVELS}; $i++ )
  {
    if ( $genomecov_fields[2] >= $COVERAGE_LEVELS[$i] )
    {
      $coverage_table[$i]++;
    }
  } 

#  for ( $i = 0 ; $i <= $#{COVERAGE_LEVELS}; $i++ )
#  {
#    print STDERR "$COVERAGE_LEVELS[$i]\t = $coverage_table[$i] \n";
#  }
#  print STDERR "\n";

} # END

######################################################################
#
#     OUTPUT
#
######################################################################

$output= "";
print F_OUT "Total Genome Size\t$genome_length\n";
#print F_OUT "Total Positions Counted\t $record_counter\n";
printf F_OUT ( "%s\t%d\n", "Zero Coverage",  $zero_coverage );
#printf F_OUT ( "%s\t%.3f%s\n", "Zero Coverage",  ( $zero_coverage / $record_counter ) * 100, "%" );
printf F_OUT ( "%s\t%d\n", "Non Zero Coverage",  $non_zero_coverage );
printf F_OUT ( "%s\t%.3f%s\n", "Low Coverage <= 5",  ( $low_coverage / $record_counter ) * 100, "%" );
printf F_OUT ( "%s\t%d\n", "Min Coverage",  $min_coverage );
printf F_OUT ( "%s\t%d\n", "Max Coverage",  $max_coverage );
$median_coverage = int( median( @all_counts )) ;
$mean_coverage = int( mean( \@all_counts ) );
printf F_OUT ( "%s\t%d\n", "Median Coverage", $median_coverage );
printf F_OUT ( "%s\t%d\n", "Mean Coverage", $mean_coverage );
print F_OUT "Depth Coverage Level\tPercentage of Kit Covered\n";

for ( $i = 0 ; $i <= $#{COVERAGE_LEVELS}; $i++ )
{
  $output .= "$COVERAGE_LEVELS[$i]" . "x\t" . int( ( $coverage_table[$i] / $record_counter ) * 100 ) . "%\n";
} 
chop( $output );
print F_OUT "$output\n";

sub median
{
  my @sorted = sort { $a <=> $b } @_;
  ($sorted[$#sorted/2 + 0.1] + $sorted[$#sorted/2 + 0.6])/2;
}

sub mean
{
  my ( $R_data ) = @_;
  my $total = 0;

  return 0 if ( ! @{ $R_data } );

  foreach ( @{ $R_data } )
  {
    $total += $_;
  }
  return $total / @{ $R_data };
}

sub check_infile
{

# Check if we can open the file 

#  print "$_[1]";
  open( $_[0], "<$_[1]" )
    or die "PANTS: Could not open input file $_[1]\n";
} # END check_infile


sub check_outfile
{

# Check if we can open the file

#  print "$_[1]";
  open( $_[0], ">$_[1]" )
    or die "PANTS: Could not open output file $_[1]\n";
} # END check_outfile

######################################################################
#
# Created                                                09-06-2017 AS

